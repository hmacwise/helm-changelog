package output

import (
	"fmt"
	"net/url"
	"os"
	"os/exec"
	"regexp"
	"strings"

	"github.com/sirupsen/logrus"

	"github.com/mogensen/helm-changelog/pkg/helm"
)

// Markdown creates a markdown representation of the changelog at the changeLogFilePath path
func Markdown(log *logrus.Logger, changeLogFilePath string, releases []*helm.Release) {

	// reverse commits
	for _, release := range releases {
		release.Commits = reverseCommits(release.Commits)
	}

	// reverse releases
	releases = reverseReleases(releases)

	log.Debugf("Creating changelog file: %s", changeLogFilePath)
	f, err := os.Create(changeLogFilePath)
	if err != nil {
		log.Fatalf("Failed creating changelog file")
	}

	defer f.Close()

	f.WriteString("# Change Log\n\n")

	for _, release := range releases {

		if release.Chart.Deprecated {
			f.WriteString(fmt.Sprintf("## %s (DEPRECATED)\n\n", release.Chart.Version))
		} else {
			f.WriteString(fmt.Sprintf("## %s\n\n", release.Chart.Version))
		}

		if release.ReleaseDate != nil {
			f.WriteString(fmt.Sprintf("**Release date:** %s\n\n", release.ReleaseDate.Format("2006-01-02")))
		}

		if release.Chart.AppVersion != "" {
			f.WriteString(badge("AppVersion", release.Chart.AppVersion, "", "success"))
		}

		if release.Chart.KubeVersion != "" {
			f.WriteString(badge("Kubernetes", release.Chart.KubeVersion, "kubernetes", "informational"))
		}

		if release.Chart.APIVersion == "" {
			f.WriteString(badge("Helm", "v2", "helm", "inactive"))
		}

		if release.Chart.APIVersion == "v1" {
			f.WriteString(badge("Helm", "v2", "helm", "inactive"))
			f.WriteString(badge("Helm", "v3", "helm", "informational"))
		}

		if release.Chart.APIVersion == "v2" {
			f.WriteString(badge("Helm", "v3", "helm", "informational"))
		}

		f.WriteString("\n\n")

		for _, l := range release.Commits {
			f.WriteString(fmt.Sprintf("* %s\n", l.Subject))
		}

		// Fetch pull request description using `gh` CLI tool
		f.WriteString("\n")
		f.WriteString("### Pull request description\n\n")
		f.WriteString("```\n")

		cmd := exec.Command("gh", "pr", "list", "--state", "all", "--search", release.Commits[0].Commit)
		commitMetadata, err := cmd.Output()
		if err != nil {
			log.Fatalf("Failed to run command: %s\nError: %s", cmd, err)
		}

		// Split string by newline delimiter
		lines := strings.Split(string(commitMetadata), "\n")
	
		// Use a regular expression to find the first number in the last line
		re := regexp.MustCompile(`\d+`)
		pullRequestNumber := re.FindString(lines[len(lines)-2])
		if pullRequestNumber == "" {
			log.Fatalf("No PR number found in Pull Request metadata: %s", lines[len(lines)-2])
		}

		// log.Infof("Pull request number: %s", pullRequestNumber)

		cmd = exec.Command("gh", "pr", "view", string(pullRequestNumber))
		pullRequestMetadata, err := cmd.Output()
		if err != nil {
			log.Fatalf("Failed to run command: %s\nError: %s", cmd, err)
		}

		// Define the regular expression pattern
		re = regexp.MustCompile(`(?s)## Context(.*?)## Checklist`)

		// Find the text between ## Context and ## Checklist
		matches := re.FindStringSubmatch(string(pullRequestMetadata))
		if len(matches) < 2 {
			log.Fatalf("No match found")
		}
	
		// Extract and print the matched text
		pullRequestDescription := matches[1]
		fmt.Println("Extracted text between ## Context and ## Checklist:")

		f.WriteString(string(pullRequestDescription))

		f.WriteString("```\n")

		f.WriteString("\n")
		f.WriteString("### Default value changes\n\n")
		f.WriteString("```diff\n")
		if release.ValueDiff == "" {
			f.WriteString("# No changes in this release\n")
		} else {
			f.WriteString(release.ValueDiff)
		}
		f.WriteString("```\n")

		f.WriteString("\n")
	}

	f.WriteString("---\n")
	// TODO Add version number
	f.WriteString(fmt.Sprintf("Autogenerated from Helm Chart and git history using [helm-changelog](https://github.com/mogensen/helm-changelog)\n"))
}

func badge(key, value, icon, style string) string {
	return fmt.Sprintf("![%s: %s](https://img.shields.io/static/v1?label=%s&message=%s&color=%s&logo=%s)\n", key, value, key, url.QueryEscape(value), style, icon)
}
